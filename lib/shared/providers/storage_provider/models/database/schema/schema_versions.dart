import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    cookie,
    imageCache,
    settings,
    threadVisitHistory,
  ];
  late final Shape0 cookie = Shape0(
      source: i0.VersionedTable(
        entityName: 'cookie',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uid)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 imageCache = Shape1(
      source: i0.VersionedTable(
        entityName: 'image_cache',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(url)',
        ],
        columns: [
          _column_4,
          _column_5,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 settings = Shape2(
      source: i0.VersionedTable(
        entityName: 'settings',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(name)',
        ],
        columns: [
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 threadVisitHistory = Shape3(
      source: i0.VersionedTable(
        entityName: 'thread_visit_history',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uid, tid)',
        ],
        columns: [
          _column_1,
          _column_14,
          _column_0,
          _column_15,
          _column_16,
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get username =>
      columnsByName['username']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get cookie =>
      columnsByName['cookie']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('username', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>('uid', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('email', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('cookie', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get url =>
      columnsByName['url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fileName =>
      columnsByName['file_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastCachedTime =>
      columnsByName['last_cached_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUsedTime =>
      columnsByName['last_used_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('url', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('file_name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_6(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_cached_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_7(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_used_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get intValue =>
      columnsByName['int_value']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get doubleValue =>
      columnsByName['double_value']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get stringValue =>
      columnsByName['string_value']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get boolValue =>
      columnsByName['bool_value']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get dateTimeValue =>
      columnsByName['date_time_value']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('int_value', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<double> _column_10(String aliasedName) =>
    i1.GeneratedColumn<double>('double_value', aliasedName, true,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('string_value', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_12(String aliasedName) =>
    i1.GeneratedColumn<bool>('bool_value', aliasedName, true,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            ' CHECK ("bool_value" IN (0, 1))'));
i1.GeneratedColumn<DateTime> _column_13(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date_time_value', aliasedName, true,
        type: i1.DriftSqlType.dateTime);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get tid =>
      columnsByName['tid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get username =>
      columnsByName['username']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get threadTitle =>
      columnsByName['thread_title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get fid =>
      columnsByName['fid']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get forumName =>
      columnsByName['forum_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get visitTime =>
      columnsByName['visit_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('tid', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('thread_title', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>('fid', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('forum_name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_18(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('visit_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
